const axios = require("axios");
const fs = require("fs");
const path = require("path");

module.exports = {
  config: {
    name: "videodl",
    aliases: ["video", "download", "yt", "fb", "tiktok", "insta"],
    version: "1.0",
    author: "Tanvir",
    shortDescription: "ржнрж┐ржбрж┐ржУ ржбрж╛ржЙржирж▓рзЛржб",
    longDescription:
      "TikTok, Facebook, YouTube, Instagram ржЗрждрзНржпрж╛ржжрж┐ рж╕рзЛрж░рзНрж╕ ржерзЗржХрзЗ ржнрж┐ржбрж┐ржУ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рзЗ ржжрзЗрзЯред",
    category: "media",
    usage: "/video [рж▓рж┐ржВржХ]",
  },

  onStart: async function ({ api, event, args }) {
    const link = args[0];
    if (!link)
      return api.sendMessage(
        "ЁЯОм ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржПржХржЯрж┐ ржнрж┐ржбрж┐ржУ рж▓рж┐ржВржХ ржжрж┐ржи ржнрж╛ржЗ!\n\nржЙржжрж╛рж╣рж░ржг:\n/video https://www.youtube.com/watch?v=xxxxx",
        event.threadID,
        event.messageID
      );

    api.sendMessage("тП│ ржнрж┐ржбрж┐ржУ рж▓рзЛржб рж╣ржЪрзНржЫрзЗ ржнрж╛ржЗ, ржПржХржЯрзБ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзЛ...", event.threadID);

    try {
      let apiUrl;

      if (link.includes("tiktok.com")) {
        apiUrl = `https://api.ryzendesu.vip/api/download/tiktok?url=${encodeURIComponent(link)}`;
      } else if (link.includes("facebook.com") || link.includes("fb.watch")) {
        apiUrl = `https://api.ryzendesu.vip/api/download/facebook?url=${encodeURIComponent(link)}`;
      } else if (link.includes("youtube.com") || link.includes("youtu.be")) {
        apiUrl = `https://api.ryzendesu.vip/api/download/ytdl?url=${encodeURIComponent(link)}`;
      } else if (link.includes("instagram.com")) {
        apiUrl = `https://api.ryzendesu.vip/api/download/instagram?url=${encodeURIComponent(link)}`;
      } else {
        return api.sendMessage(
          "ЁЯШХ ржнрж╛ржЗ ржПржЗ рж▓рж┐ржВржХржЯрж╛ ржЪрж┐ржирждрзЗ ржкрж╛рж░рж▓рж╛ржо ржирж╛!\nTikTok, YouTube, Facebook ржмрж╛ Instagram рж▓рж┐ржВржХ ржжрж┐ржиред",
          event.threadID,
          event.messageID
        );
      }

      const res = await axios.get(apiUrl);
      const videoUrl =
        res.data.data?.url ||
        res.data.data?.hd ||
        res.data.data?.result ||
        res.data.result ||
        null;

      if (!videoUrl)
        return api.sendMessage(
          "ЁЯШФ ржжрзБржГржЦрж┐ржд ржнрж╛ржЗ, ржнрж┐ржбрж┐ржУ рж▓рж┐ржВржХ ржарж┐ржХржорждрзЛ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред",
          event.threadID,
          event.messageID
        );

      const videoPath = path.join(__dirname, "video.mp4");
      const writer = fs.createWriteStream(videoPath);

      const videoStream = await axios({
        url: videoUrl,
        method: "GET",
        responseType: "stream",
      });

      videoStream.data.pipe(writer);

      writer.on("finish", async () => {
        await api.sendMessage(
          {
            body: "ЁЯОе ржнрж┐ржбрж┐ржУ ржбрж╛ржЙржирж▓рзЛржб рж╕ржорзНржкржирзНржи тЬЕ",
            attachment: fs.createReadStream(videoPath),
          },
          event.threadID,
          () => fs.unlinkSync(videoPath)
        );
      });

      writer.on("error", (err) => {
        console.error(err);
        api.sendMessage("тЭМ ржнрж┐ржбрж┐ржУ ржбрж╛ржЙржирж▓рзЛржбрзЗ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗ ржнрж╛ржЗред", event.threadID);
      });
    } catch (error) {
      console.error(error);
      api.sendMessage(
        "ЁЯШв рж╕рж╛рж░рзНржнрж╛рж░рзЗ рж╕ржорж╕рзНржпрж╛ ржнрж╛ржЗ, ржПржХржЯрзБ ржкрж░рзЗ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзЛред",
        event.threadID,
        event.messageID
      );
    }
  },
};
